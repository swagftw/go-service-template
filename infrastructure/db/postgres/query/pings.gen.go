// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-service-template/infrastructure/db/postgres/models"
)

func newPing(db *gorm.DB, opts ...gen.DOOption) ping {
	_ping := ping{}

	_ping.pingDo.UseDB(db, opts...)
	_ping.pingDo.UseModel(&models.Ping{})

	tableName := _ping.pingDo.TableName()
	_ping.ALL = field.NewAsterisk(tableName)
	_ping.ID = field.NewString(tableName, "id")
	_ping.CreatedAt = field.NewTime(tableName, "created_at")
	_ping.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ping.DeletedAt = field.NewField(tableName, "deleted_at")
	_ping.Name = field.NewString(tableName, "name")

	_ping.fillFieldMap()

	return _ping
}

type ping struct {
	pingDo pingDo

	ALL       field.Asterisk
	ID        field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String

	fieldMap map[string]field.Expr
}

func (p ping) Table(newTableName string) *ping {
	p.pingDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p ping) As(alias string) *ping {
	p.pingDo.DO = *(p.pingDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *ping) updateTableName(table string) *ping {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Name = field.NewString(table, "name")

	p.fillFieldMap()

	return p
}

func (p *ping) WithContext(ctx context.Context) IPingDo { return p.pingDo.WithContext(ctx) }

func (p ping) TableName() string { return p.pingDo.TableName() }

func (p ping) Alias() string { return p.pingDo.Alias() }

func (p ping) Columns(cols ...field.Expr) gen.Columns { return p.pingDo.Columns(cols...) }

func (p *ping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *ping) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["name"] = p.Name
}

func (p ping) clone(db *gorm.DB) ping {
	p.pingDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p ping) replaceDB(db *gorm.DB) ping {
	p.pingDo.ReplaceDB(db)
	return p
}

type pingDo struct{ gen.DO }

type IPingDo interface {
	gen.SubQuery
	Debug() IPingDo
	WithContext(ctx context.Context) IPingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPingDo
	WriteDB() IPingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPingDo
	Not(conds ...gen.Condition) IPingDo
	Or(conds ...gen.Condition) IPingDo
	Select(conds ...field.Expr) IPingDo
	Where(conds ...gen.Condition) IPingDo
	Order(conds ...field.Expr) IPingDo
	Distinct(cols ...field.Expr) IPingDo
	Omit(cols ...field.Expr) IPingDo
	Join(table schema.Tabler, on ...field.Expr) IPingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPingDo
	Group(cols ...field.Expr) IPingDo
	Having(conds ...gen.Condition) IPingDo
	Limit(limit int) IPingDo
	Offset(offset int) IPingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPingDo
	Unscoped() IPingDo
	Create(values ...*models.Ping) error
	CreateInBatches(values []*models.Ping, batchSize int) error
	Save(values ...*models.Ping) error
	First() (*models.Ping, error)
	Take() (*models.Ping, error)
	Last() (*models.Ping, error)
	Find() ([]*models.Ping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Ping, err error)
	FindInBatches(result *[]*models.Ping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Ping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPingDo
	Assign(attrs ...field.AssignExpr) IPingDo
	Joins(fields ...field.RelationField) IPingDo
	Preload(fields ...field.RelationField) IPingDo
	FirstOrInit() (*models.Ping, error)
	FirstOrCreate() (*models.Ping, error)
	FindByPage(offset int, limit int) (result []*models.Ping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pingDo) Debug() IPingDo {
	return p.withDO(p.DO.Debug())
}

func (p pingDo) WithContext(ctx context.Context) IPingDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pingDo) ReadDB() IPingDo {
	return p.Clauses(dbresolver.Read)
}

func (p pingDo) WriteDB() IPingDo {
	return p.Clauses(dbresolver.Write)
}

func (p pingDo) Session(config *gorm.Session) IPingDo {
	return p.withDO(p.DO.Session(config))
}

func (p pingDo) Clauses(conds ...clause.Expression) IPingDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pingDo) Returning(value interface{}, columns ...string) IPingDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pingDo) Not(conds ...gen.Condition) IPingDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pingDo) Or(conds ...gen.Condition) IPingDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pingDo) Select(conds ...field.Expr) IPingDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pingDo) Where(conds ...gen.Condition) IPingDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pingDo) Order(conds ...field.Expr) IPingDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pingDo) Distinct(cols ...field.Expr) IPingDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pingDo) Omit(cols ...field.Expr) IPingDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pingDo) Join(table schema.Tabler, on ...field.Expr) IPingDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPingDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pingDo) RightJoin(table schema.Tabler, on ...field.Expr) IPingDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pingDo) Group(cols ...field.Expr) IPingDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pingDo) Having(conds ...gen.Condition) IPingDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pingDo) Limit(limit int) IPingDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pingDo) Offset(offset int) IPingDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPingDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pingDo) Unscoped() IPingDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pingDo) Create(values ...*models.Ping) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pingDo) CreateInBatches(values []*models.Ping, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pingDo) Save(values ...*models.Ping) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pingDo) First() (*models.Ping, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Ping), nil
	}
}

func (p pingDo) Take() (*models.Ping, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Ping), nil
	}
}

func (p pingDo) Last() (*models.Ping, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Ping), nil
	}
}

func (p pingDo) Find() ([]*models.Ping, error) {
	result, err := p.DO.Find()
	return result.([]*models.Ping), err
}

func (p pingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Ping, err error) {
	buf := make([]*models.Ping, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pingDo) FindInBatches(result *[]*models.Ping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pingDo) Attrs(attrs ...field.AssignExpr) IPingDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pingDo) Assign(attrs ...field.AssignExpr) IPingDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pingDo) Joins(fields ...field.RelationField) IPingDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pingDo) Preload(fields ...field.RelationField) IPingDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pingDo) FirstOrInit() (*models.Ping, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Ping), nil
	}
}

func (p pingDo) FirstOrCreate() (*models.Ping, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Ping), nil
	}
}

func (p pingDo) FindByPage(offset int, limit int) (result []*models.Ping, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pingDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pingDo) Delete(models ...*models.Ping) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pingDo) withDO(do gen.Dao) *pingDo {
	p.DO = *do.(*gen.DO)
	return p
}
